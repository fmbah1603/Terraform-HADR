snapshotId=$(az snapshot list --query "[?properties.managedBy.contains('$resourceGroupName') && properties.managedBy.contains('$vmName')].id | [0]" -o tsv)

snapshotName=$(az snapshot list --query "[?properties.managedBy.contains('$resourceGroupName') && properties.managedBy.contains('$vmName')].name | [0]" -o tsv)

nicName="${virtualMachineName,,}_nic"

# Create NIC in the first subnet of the virtual network
az network nic create \
    --name $nicName \
    --resource-group $resourceGroupName \
    --location $snapshotLocation \
    --subnet $(az network vnet subnet show --name default --vnet-name $virtualNetworkName --resource-group $resourceGroupName --query id --output tsv) \
    --public-ip-address $publicIpId



az : ERROR: (InvalidResourceReference) Resource 
/subscriptions/91da15f8-3ba9-4916-afe1-da3b8651e6d5/resourceGroups/az-ha-dev-usva-rg/providers/Microsoft.Network/virtualNetworks/az-opa-dev-usva-vnet/subnets/AppSubnet referenced by 
resource /subscriptions/91da15f8-3ba9-4916-afe1-da3b8651e6d5/resourceGroups/az-ha-dev-usva-rg/providers/Microsoft.Network/networkInterfaces/hadr-nic was not found. Please make sure that the 
referenced resource exists, and that both resources are in the same region.
At line:1 char:8
+ $nic = az network nic create --resource-group $resourceGroupName --na ...
+        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (ERROR: (Invalid...he same region.:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
 
Code: InvalidResourceReference
Message: Resource /subscriptions/91da15f8-3ba9-4916-afe1-da3b8651e6d5/resourceGroups/az-ha-dev-usva-rg/providers/Microsoft.Network/virtualNetworks/az-opa-dev-usva-vnet/subnets/AppSubnet 
referenced by resource /subscriptions/91da15f8-3ba9-4916-afe1-da3b8651e6d5/resourceGroups/az-ha-dev-usva-rg/providers/Microsoft.Network/networkInterfaces/hadr-nic was not found. Please make 
sure that the referenced resource exists, and that both resources are in the same region.

az network public-ip create --resource-group myResourceGroup --name myPublicIP --sku Standard --version IPv4 --zone 1 2 3
az network nic create --resource-group myResourceGroup --name myNIC --private-ip-address-version IPv4 --vnet-name myVNet --subnet myBackEndSubnet --public-ip-address myPublicIP





VNetresourceGroupName="your_resource_group_name"
virtualNetworkName="your_virtual_network_name"

# Retrieve the virtual network
vnet=$(az network vnet show --resource-group $resourceGroupName --name $virtualNetworkName)
vnetName=$(echo $vnet | jq -r '.name')


provider "azurerm" {
  features {}
}

# App Service Plan 1
resource "azurerm_app_service_plan" "example" {
  name                = "example-appserviceplan"
  location            = "East US"  # Update with your desired location for the first App Service Plan
  resource_group_name = "example-resources"
  kind                = "Windows"
  reserved            = true
  sku {
    tier = "Standard"
    size = "S1"
  }
}

# App Service 1
resource "azurerm_app_service" "example" {
  name                = "example-appservice"
  location            = "East US"  # Update with your desired location for the first App Service
  resource_group_name = "example-resources"
  app_service_plan_id = azurerm_app_service_plan.example.id
}

# App Service Plan 2
resource "azurerm_app_service_plan" "example2" {
  name                = "example-appserviceplan2"
  location            = "West Europe"  # Update with your desired location for the second App Service Plan
  resource_group_name = "example-resources"
  kind                = "Windows"
  reserved            = true
  sku {
    tier = "Standard"
    size = "S1"
  }
}

# App Service 2
resource "azurerm_app_service" "example2" {
  name                = "example-appservice2"
  location            = "West Europe"  # Update with your desired location for the second App Service
  resource_group_name = "example-resources"
  app_service_plan_id = azurerm_app_service_plan.example2.id
}

# SQL IaaS server
resource "azurerm_sql_server" "example" {
  name                         = "example-sqlserver"
  resource_group_name          = "example-resources"
  location                     = "East US"  # Update with your desired location for the SQL IaaS server
  version                      = "12.0"  # Update with your desired SQL Server version
  administrator_login          = "sqladmin"  # Update with your desired SQL administrator login
  administrator_login_password = "Password123!"  # Update with your desired SQL administrator password
}

# Recovery Services Vault Backup Policy
resource "azurerm_recovery_services_vault_backup_policy_association" "example" {
  recovery_services_vault_name = "example-vault"  # Update with your existing Recovery Services Vault name
  resource_group_name          = "example-resources"
  policy_id                    = "existing-backup-policy-id"  # Update with the ID of your existing backup policy
  type                         = "SQL"  # Type of the resource to associate with the backup policy, in this case, SQL
  source_resource_id           = azurerm_sql_server.example.id
}

# Azure Traffic Manager
resource "azurerm_traffic_manager_profile" "example" {
  name                = "example-trafficmanager"
  resource_group_name = "example-resources"
  profile_status      = "Enabled"
  traffic_routing_method = "Priority"

  dns_config {
    relative_name = "example"
    ttl           = 60
  }

  monitor_config {
    protocol   = "HTTP"
    port       = 80
    path       = "/"
    interval   = 30
    timeout    = 10
    tolerated_failures = 3
  }

  # Endpoint for the first App Service
  # Priority 1
  endpoint {
    name                = "appservice1-endpoint"
    target_resource_id  = azurerm_app_service.example.id
    type                = "AzureEndpoints"
    priority            = 1
  }

  # Endpoint for the second App Service
  # Priority 2
  endpoint {
    name                = "appservice2-endpoint"
    target_resource_id  = azurerm_app_service.example2.id
    type                = "AzureEndpoints"
    priority            = 2
  }
}


monitor_config {
    protocol                     = "HTTP"
    port                         = 80
    path                         = "/"
    interval_in_seconds          = 30
    timeout_in_seconds           = 9
    tolerated_number_of_failures = 3
  }

resource "random_id" "server" {
  keepers = {
    azi_id = 1
  }

  byte_length = 8
}

resource "azurerm_resource_group" "example" {
  name     = "trafficmanagerendpointTest"
  location = "West US"
}

resource "azurerm_traffic_manager_profile" "example" {
  name                = random_id.server.hex
  resource_group_name = azurerm_resource_group.example.name

  traffic_routing_method = "Weighted"

  dns_config {
    relative_name = random_id.server.hex
    ttl           = 100
  }

  monitor_config {
    protocol                     = "http"
    port                         = 80
    path                         = "/"
    interval_in_seconds          = 30
    timeout_in_seconds           = 9
    tolerated_number_of_failures = 3
  }

  tags = {
    environment = "Production"
  }
}

resource "azurerm_traffic_manager_endpoint" "example" {
  name                = random_id.server.hex
  resource_group_name = azurerm_resource_group.example.name
  profile_name        = azurerm_traffic_manager_profile.example.name
  target              = "terraform.io"
  type                = "externalEndpoints"
  weight              = 100
}

│ Warning: Deprecated Resource
│
│   with azurerm_app_service_plan.hadr_serviceplanA,
│   on main.tf line 232, in resource "azurerm_app_service_plan" "hadr_serviceplanA":
│  232: resource "azurerm_app_service_plan" "hadr_serviceplanA" {
│
│ The `azurerm_app_service_plan` resource has been superseded by the `azurerm_service_plan` resource. Whilst this resource will continue to be available in the 2.x and 3.x releases it is feature-frozen for compatibility purposes, will no
│ longer receive any updates and will be removed in a future major release of the Azure Provider.
│
│ (and 3 more similar warnings elsewhere)
╵
╷
│ Error: Invalid resource type
│
│   on main.tf line 332, in resource "azurerm_traffic_manager_endpoint" "hadr_tmendpointA":
│  332: resource "azurerm_traffic_manager_endpoint" "hadr_tmendpointA" {
│
│ The provider hashicorp/azurerm does not support resource type "azurerm_traffic_manager_endpoint".
╵
╷
│ Error: Invalid resource type
│
│   on main.tf line 340, in resource "azurerm_traffic_manager_endpoint" "hadr_tmendpointB":
│  340: resource "azurerm_traffic_manager_endpoint" "hadr_tmendpointB" {
│
│ The provider hashicorp/azurerm does not support resource type "azurerm_traffic_manager_endpoint".


resource "azurerm_traffic_manager_azure_endpoint" "example" {
  name                 = "example-endpoint"
  profile_id           = azurerm_traffic_manager_profile.example.id
  always_serve_enabled = true
  weight               = 100
  target_resource_id   = azurerm_public_ip.example.id
}


https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/site_recovery_replication_recovery_plan


output "os_disk_properties" {
  value = azurerm_linux_virtual_machine.example.os_disk
}


data "terraform_remote_state" "vm_state" {
  backend = "remote"

  config = {
    organization = "your_organization"
    workspaces {
      name = "your_workspace"
    }
  }
}

output "referenced_os_disk_properties" {
  value = data.terraform_remote_state.vm_state.outputs.os_disk_properties
}
